/*
 * This file is generated by jOOQ.
 */
package pl.ag.fleet.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.ag.fleet.Fleet;
import pl.ag.fleet.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Driver extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fleet.driver</code>
     */
    public static final Driver DRIVER = new Driver();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>fleet.driver.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>fleet.driver.company_id</code>.
     */
    public final TableField<Record, Long> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fleet.driver.last_name</code>.
     */
    public final TableField<Record, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.driver.first_name</code>.
     */
    public final TableField<Record, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.driver.seniority</code>.
     */
    public final TableField<Record, Integer> SENIORITY = createField(DSL.name("seniority"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fleet.driver.title</code>.
     */
    public final TableField<Record, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    private Driver(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Driver(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>fleet.driver</code> table reference
     */
    public Driver(String alias) {
        this(DSL.name(alias), DRIVER);
    }

    /**
     * Create an aliased <code>fleet.driver</code> table reference
     */
    public Driver(Name alias) {
        this(alias, DRIVER);
    }

    /**
     * Create a <code>fleet.driver</code> table reference
     */
    public Driver() {
        this(DSL.name("driver"), null);
    }

    public <O extends Record> Driver(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DRIVER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fleet.FLEET;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.DRIVER_PKEY;
    }

    @Override
    public Driver as(String alias) {
        return new Driver(DSL.name(alias), this);
    }

    @Override
    public Driver as(Name alias) {
        return new Driver(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(String name) {
        return new Driver(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(Name name) {
        return new Driver(name, null);
    }
}
