/*
 * This file is generated by jOOQ.
 */
package pl.ag.fleet.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pl.ag.fleet.Fleet;
import pl.ag.fleet.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Insurance extends TableImpl<Record> {

  /**
   * The reference instance of <code>fleet.insurance</code>
   */
  public static final Insurance INSURANCE = new Insurance();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>fleet.insurance.id</code>.
   */
  public final TableField<Record, Long> ID = createField(DSL.name("id"),
      SQLDataType.BIGINT.nullable(false).identity(true), this, "");
  /**
   * The column <code>fleet.insurance.insurance_cost</code>.
   */
  public final TableField<Record, BigDecimal> INSURANCE_COST = createField(
      DSL.name("insurance_cost"), SQLDataType.NUMERIC(19, 2), this, "");
  /**
   * The column <code>fleet.insurance.insurance_expiration_date</code>.
   */
  public final TableField<Record, LocalDate> INSURANCE_EXPIRATION_DATE = createField(
      DSL.name("insurance_expiration_date"), SQLDataType.LOCALDATE, this, "");
  /**
   * The column <code>fleet.insurance.insurance_name</code>.
   */
  public final TableField<Record, String> INSURANCE_NAME = createField(DSL.name("insurance_name"),
      SQLDataType.VARCHAR(255), this, "");
  /**
   * The column <code>fleet.insurance.vehicle_id</code>.
   */
  public final TableField<Record, String> VEHICLE_ID = createField(DSL.name("vehicle_id"),
      SQLDataType.VARCHAR(255), this, "");

  private Insurance(Name alias, Table<Record> aliased) {
    this(alias, aliased, null);
  }

  private Insurance(Name alias, Table<Record> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>fleet.insurance</code> table reference
   */
  public Insurance(String alias) {
    this(DSL.name(alias), INSURANCE);
  }

  /**
   * Create an aliased <code>fleet.insurance</code> table reference
   */
  public Insurance(Name alias) {
    this(alias, INSURANCE);
  }

  /**
   * Create a <code>fleet.insurance</code> table reference
   */
  public Insurance() {
    this(DSL.name("insurance"), null);
  }

  public <O extends Record> Insurance(Table<O> child, ForeignKey<O, Record> key) {
    super(child, key, INSURANCE);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<Record> getRecordType() {
    return Record.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Fleet.FLEET;
  }

  @Override
  public Identity<Record, Long> getIdentity() {
    return (Identity<Record, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<Record> getPrimaryKey() {
    return Keys.INSURANCE_PKEY;
  }

  @Override
  public Insurance as(String alias) {
    return new Insurance(DSL.name(alias), this);
  }

  @Override
  public Insurance as(Name alias) {
    return new Insurance(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Insurance rename(String name) {
    return new Insurance(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Insurance rename(Name name) {
    return new Insurance(name, null);
  }
}
