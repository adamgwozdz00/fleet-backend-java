/*
 * This file is generated by jOOQ.
 */
package pl.ag.fleet.tables;


import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.ag.fleet.Fleet;
import pl.ag.fleet.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Overview extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fleet.overview</code>
     */
    public static final Overview OVERVIEW = new Overview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>fleet.overview.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>fleet.overview.overview_cost</code>.
     */
    public final TableField<Record, BigDecimal> OVERVIEW_COST = createField(DSL.name("overview_cost"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column <code>fleet.overview.overview_description</code>.
     */
    public final TableField<Record, String> OVERVIEW_DESCRIPTION = createField(DSL.name("overview_description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.overview.overview_expiration_date</code>.
     */
    public final TableField<Record, LocalDate> OVERVIEW_EXPIRATION_DATE = createField(DSL.name("overview_expiration_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fleet.overview.overview_name</code>.
     */
    public final TableField<Record, String> OVERVIEW_NAME = createField(DSL.name("overview_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.overview.vehicle_id</code>.
     */
    public final TableField<Record, String> VEHICLE_ID = createField(DSL.name("vehicle_id"), SQLDataType.VARCHAR(255), this, "");

    private Overview(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Overview(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>fleet.overview</code> table reference
     */
    public Overview(String alias) {
        this(DSL.name(alias), OVERVIEW);
    }

    /**
     * Create an aliased <code>fleet.overview</code> table reference
     */
    public Overview(Name alias) {
        this(alias, OVERVIEW);
    }

    /**
     * Create a <code>fleet.overview</code> table reference
     */
    public Overview() {
        this(DSL.name("overview"), null);
    }

    public <O extends Record> Overview(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, OVERVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fleet.FLEET;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.OVERVIEW_PKEY;
    }

    @Override
    public Overview as(String alias) {
        return new Overview(DSL.name(alias), this);
    }

    @Override
    public Overview as(Name alias) {
        return new Overview(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Overview rename(String name) {
        return new Overview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Overview rename(Name name) {
        return new Overview(name, null);
    }
}
