/*
 * This file is generated by jOOQ.
 */
package pl.ag.fleet.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.ag.fleet.Fleet;
import pl.ag.fleet.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vehicle extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fleet.vehicle</code>
     */
    public static final Vehicle VEHICLE = new Vehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>fleet.vehicle.vehicle_id</code>.
     */
    public final TableField<Record, String> VEHICLE_ID = createField(DSL.name("vehicle_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fleet.vehicle.company_id</code>.
     */
    public final TableField<Record, Long> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>fleet.vehicle.production_year</code>.
     */
    public final TableField<Record, Integer> PRODUCTION_YEAR = createField(DSL.name("production_year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fleet.vehicle.fuel_type</code>.
     */
    public final TableField<Record, String> FUEL_TYPE = createField(DSL.name("fuel_type"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>fleet.vehicle.make</code>.
     */
    public final TableField<Record, String> MAKE = createField(DSL.name("make"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.vehicle.model</code>.
     */
    public final TableField<Record, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.vehicle.vin_number</code>.
     */
    public final TableField<Record, String> VIN_NUMBER = createField(DSL.name("vin_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fleet.vehicle.insurance_id</code>.
     */
    public final TableField<Record, Long> INSURANCE_ID = createField(DSL.name("insurance_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>fleet.vehicle.overview_id</code>.
     */
    public final TableField<Record, Long> OVERVIEW_ID = createField(DSL.name("overview_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>fleet.vehicle.state_id</code>.
     */
    public final TableField<Record, Long> STATE_ID = createField(DSL.name("state_id"), SQLDataType.BIGINT, this, "");

    private Vehicle(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Vehicle(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>fleet.vehicle</code> table reference
     */
    public Vehicle(String alias) {
        this(DSL.name(alias), VEHICLE);
    }

    /**
     * Create an aliased <code>fleet.vehicle</code> table reference
     */
    public Vehicle(Name alias) {
        this(alias, VEHICLE);
    }

    /**
     * Create a <code>fleet.vehicle</code> table reference
     */
    public Vehicle() {
        this(DSL.name("vehicle"), null);
    }

    public <O extends Record> Vehicle(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, VEHICLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fleet.FLEET;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.VEHICLE_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.VEHICLE__FKINSURANCE, Keys.VEHICLE__FKOVERVIEW, Keys.VEHICLE__FKVEHICLESTATE);
    }

    private transient Insurance _insurance;
    private transient Overview _overview;
    private transient VehicleState _vehicleState;

    /**
     * Get the implicit join path to the <code>fleet.insurance</code> table.
     */
    public Insurance insurance() {
        if (_insurance == null)
            _insurance = new Insurance(this, Keys.VEHICLE__FKINSURANCE);

        return _insurance;
    }

    /**
     * Get the implicit join path to the <code>fleet.overview</code> table.
     */
    public Overview overview() {
        if (_overview == null)
            _overview = new Overview(this, Keys.VEHICLE__FKOVERVIEW);

        return _overview;
    }

    /**
     * Get the implicit join path to the <code>fleet.vehicle_state</code> table.
     */
    public VehicleState vehicleState() {
        if (_vehicleState == null)
            _vehicleState = new VehicleState(this, Keys.VEHICLE__FKVEHICLESTATE);

        return _vehicleState;
    }

    @Override
    public Vehicle as(String alias) {
        return new Vehicle(DSL.name(alias), this);
    }

    @Override
    public Vehicle as(Name alias) {
        return new Vehicle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(String name) {
        return new Vehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Name name) {
        return new Vehicle(name, null);
    }
}
